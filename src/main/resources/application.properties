spring.application.name=foodCourtServerSide
spring.thymeleaf.cache=false

server.port = 8082

## MySQL
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/food_court_v1?useUnicode=yes&serverTimezone=GMT%2B7
#spring.datasource.url=jdbc:mysql://localhost:3306/food_court_v1?useUnicode=yes&serverTimezone=GMT%2B7
#spring.datasource.username=root
#spring.datasource.password=khanh123root

spring.datasource.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?useUnicode=yes&serverTimezone=GMT%2B7
spring.datasource.username=${MYSQL_USER}
spring.datasource.password=${MYSQL_PASSWORD}


# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = create-drop
#spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.ddl-auto = none

# Flyway settings
#spring.flyway.enabled=true
#spring.flyway.url=jdbc:mysql://localhost:3306/food_court_v1
#spring.flyway.user=root
#spring.flyway.password=khanh123root
#spring.flyway.locations=classpath:db/migration
#spring.flyway.baseline-on-migrate=true

spring.flyway.enabled=true
spring.flyway.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}
spring.flyway.user=${MYSQL_USER}
spring.flyway.password=${MYSQL_PASSWORD}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true


# Keycloak, Oauth2, Spring Security
#spring.security.oauth2.client.registration.keycloak.client-id=food-court-rest-api
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.keycloak.scope=openid
#
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/FoodCourtSpringBootKeycloak
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/FoodCourtSpringBootKeycloak
#
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/FoodCourtSpringBootKeycloak/protocol/openid-connect/certs


spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI}

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWK_SET_URI}



spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size = 10MB
spring.servlet.multipart.max-request-size = 10MB
#spring.mvc.cors.allowed-origins=http://localhost:3000


# Further, we can customize the path in application.properties using the springdoc.api-docs property. For example, we can set the path to /api-docs. Then, we?ll be able to access the docs at: "http://localhost:8082/api-docs" instead of "http://localhost:8082/v3/api-docs"
springdoc.api-docs.path=/api-docs

# The springdoc-openapi library also supports swagger-ui properties. These can be used as Spring Boot properties with the prefix springdoc.swagger-ui. For example, we can customize the path of our API documentation by changing the springdoc.swagger-ui.path property inside our application.properties file: Then, we?ll be able to access at: "http://localhost:8082/swagger-ui-custom.html"
springdoc.swagger-ui.path=/swagger-ui-custom.html

# We can sort the API paths according to their HTTP methods with the springdoc.swagger-ui.operationsSorter property: (ex: "GET PUT DELETE" instead of "PUT DELETE GET")
springdoc.swagger-ui.operationsSorter=method


spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp